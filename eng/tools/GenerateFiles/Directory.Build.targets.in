<Project>
  <PropertyGroup>
    <!-- Workaround while there is no SDK available that understands the TFM; suppress unsupported version errors. -->
    <NETCoreAppMaximumVersion>99.9</NETCoreAppMaximumVersion>

    <UpdateAspNetCoreKnownFramework
      Condition=" '$(UpdateAspNetCoreKnownFramework)' == '' ">true</UpdateAspNetCoreKnownFramework>
  </PropertyGroup>

  <!-- Workaround when there is no vNext SDK available; copy known apphost/framework reference info from 5.0. -->
  <ItemGroup>
    <KnownAppHostPack
      Include="@(KnownAppHostPack->WithMetadataValue('TargetFramework', 'netcoreapp5.0'))"
      TargetFramework="${KnownAppHostPackOrFrameworkReferenceTfm}"
      Condition="@(KnownAppHostPack->Count()) != '0' AND
        !(@(KnownAppHostPack->AnyHaveMetadataValue('TargetFramework', '${KnownAppHostPackOrFrameworkReferenceTfm}')))" />
    <KnownFrameworkReference
      Include="@(KnownFrameworkReference->WithMetadataValue('TargetFramework', 'netcoreapp5.0'))"
      TargetFramework="${KnownAppHostPackOrFrameworkReferenceTfm}"
      Condition="@(KnownFrameworkReference->Count()) != '0' AND
        !(@(KnownFrameworkReference->AnyHaveMetadataValue('TargetFramework', '${KnownAppHostPackOrFrameworkReferenceTfm}')))" />
  </ItemGroup>

  <ItemGroup>
    <!-- Use the same NETCore shared framework as repo built against except when building product code in servicing. -->
    <KnownFrameworkReference
        Update="@(KnownFrameworkReference->WithMetadataValue('Identity', 'Microsoft.NETCore.App')->WithMetadataValue('TargetFramework', '${KnownAppHostPackOrFrameworkReferenceTfm}'))"
        LatestRuntimeFrameworkVersion="${MicrosoftNETCoreAppRuntimeVersion}">
      <!--
        Use $(TargetLatestRuntimePatch) to explicitly control whether assemblies build against default (false) or
        latest (true). When that property is not set, SDK uses default metadata in most cases but published apps
        e.g. tool projects use latest.
      -->
      <DefaultRuntimeFrameworkVersion
          Condition=" '$(IsServicingBuild)' != 'true' ">${MicrosoftNETCoreAppRuntimeVersion}</DefaultRuntimeFrameworkVersion>
      <TargetingPackVersion
          Condition=" '$(IsServicingBuild)' != 'true' ">${MicrosoftNETCoreAppRefPackageVersion}</TargetingPackVersion>
    </KnownFrameworkReference>

    <!-- Use the just-built ASP.NET Core shared framework if available except when building product code in servicing. -->
    <KnownFrameworkReference
        Update="@(KnownFrameworkReference->WithMetadataValue('Identity', 'Microsoft.AspNetCore.App')->WithMetadataValue('TargetFramework', '${KnownAppHostPackOrFrameworkReferenceTfm}'))"
        Condition=" $(UpdateAspNetCoreKnownFramework) AND
          EXISTS('$(DOTNET_ROOT)\shared\Microsoft.AspNetCore.App\${MicrosoftAspNetCoreAppRuntimePackageVersion}') "
        LatestRuntimeFrameworkVersion="${MicrosoftAspNetCoreAppRuntimePackageVersion}"
        RuntimePackRuntimeIdentifiers="${SupportedRuntimeIdentifiers}">
      <DefaultRuntimeFrameworkVersion
          Condition=" '$(IsServicingBuild)' != 'true' ">${MicrosoftAspNetCoreAppRuntimePackageVersion}</DefaultRuntimeFrameworkVersion>
      <TargetingPackVersion
          Condition=" '$(IsServicingBuild)' != 'true' ">${MicrosoftAspNetCoreAppRefPackageVersion}</TargetingPackVersion>
    </KnownFrameworkReference>

    <PackageReference Include="Microsoft.Net.Compilers.Toolset"
      Version="${MicrosoftNetCompilersToolsetPackageVersion}"
      PrivateAssets="all"
      IsImplicitlyDefined="true" />
  </ItemGroup>

  <!-- Warn if the "just-built" ASP.NET Core shared framework does not exist. -->
  <Target Name="WarnAboutMissingSharedFramework"
      BeforeTargets="Restore;Build;Rebuild;RunTests;Test;VSTest;Pack"
      Condition=" $(UpdateAspNetCoreKnownFramework) AND
        !EXISTS('$(DOTNET_ROOT)\shared\Microsoft.AspNetCore.App\${MicrosoftAspNetCoreAppRuntimePackageVersion}') ">
    <Warning Text="Requested Microsoft.AspNetCore.App v${MicrosoftAspNetCoreAppRuntimePackageVersion} does not exist." />
  </Target>
</Project>
